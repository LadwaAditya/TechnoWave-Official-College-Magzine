/*

write a c++ program to create a class called stack
using an array of integers.Implement the following
operations by overloading the operators + and -.

1)s1=s1+element:where s1 is an object of the class stack
and element is an integer to be pushed on top of the stack.

2)s1=s1-:where s1 is on object of the class stack & -operator
pops the element.

Handle the stack empty and stack full conditions.

*/



#include<iostream.h>
#include<conio.h>
const int max=5;
class stack
{
int arr[100];
int top;
public:
	stack()
	{
	top=-1;
	}
stack operator +(int ele);
stack operator -();
friend ostream &operator<<(ostream &out,stack &s);
};
stack stack::operator +(int ele)
{
	if(top==max-1)
	cout<<"stack full"<<endl;
	else
	arr[++top]=ele;
return *this;
}
stack stack::operator - ()
{
	if(top==-1)
	cout<<"\nstack underflow"<<endl;
	else
	cout<<"\nelement popped is:"<<arr[top--]<<endl;
	return *this;
}
ostream &operator<<(ostream &out,stack &s)
{
	if(s.top==-1)
	out<<"\nstack is empty"<<endl;
	else
	{
	out<<"\nelement on stack are\n"<<endl;
	for(int i=s.top;i>=0;i--)
	out<<s.arr[i]<<endl;
	}
return out;
}
void main()
{
stack s1;
int choice,ele;
clrscr();
	do
	{
	cout<<"\n1.push";
	cout<<"\n2.pop";
	cout<<"\n3.display";
	cout<<"\n4.exit";
	cout<<"\nenter the choice:";
	cin>>choice;
		switch(choice)
		{
		case 1:
		cout<<"enter the integer to be pushed:";
		cin>>ele;
		s1=s1+ele;
		break;
		case 2:
		s1=-s1;
		break;
		case 3:
		cout<<s1<<endl;
		break;
		case 4:break;
		default:cout<<"invalid choice"<<endl;
		}
	}while(choice!=4);
getch();
}





