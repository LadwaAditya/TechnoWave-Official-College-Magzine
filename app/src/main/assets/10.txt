/*

Doubly linked list program.To create a list of integers by adding values
at front.To insert to the left of key element.To delete a value present
in the list.To display the list.

*/



#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct element
{
int data;
struct element *next,*prev;
};
typedef struct element node;
node *head;
void main()
{
void insfront(int);
int search(int);
void insertleft(int,int);
void delvalue(int);
void display();
void dispback();
int choice,val,data,ch1,keyvalue,flag;
clrscr();
head=NULL;
do
{
printf("\n1.insertfront\n2.insert to left of key value");
printf("\n3.delete by value\n4.display\5.exit");
printf("\nenter the choice:");
scanf("%d",&choice);
	switch(choice)
	{
	case 1:
		while(1)
		{
		printf("\ndo you want to insert a node say yes or no(1/0):");
		scanf("%d",&ch1);
		if(ch1==0)break;
		printf("\nenter the value to be inserted at front:");
		scanf("%d",&val);
		flag=search(val);
		if(flag==1)
		printf("\n the element is already present");
		else
		insfront(val);
		}
		break;
	case 2:
	printf("\nenter the key value to the left of which the value is to be inserted:");
	scanf("%d",&keyvalue);
	flag=search(keyvalue);
	if(flag==0)
	printf("\nthe keyvalue is not present in the list.Insert left cannot be done\n");
	else
	{
	printf("\n enter the value to be inserted to the left of key value:");
	scanf("%d",&val);
	flag=search(val);
	if(flag==1)
	printf("\n the value is already present");
	else
	insertleft(keyvalue,val);
	}
	break;
	case 3:
	printf("\nenter the value to be deleted:");
	scanf("%d",&val);
	flag=search(val);
	if(flag==0)
	printf("\nthe value is not present");
	else
	delvalue(val);
	break;
	case 4:
	if(head==NULL)
	printf("\nthe list is empty");
	else
	display();
	dispback();
	break;
	case 5:break;
	default:break;
	}
}while(choice!=5);
}
void insfront(int value)
{
node *info;
info=(node*)malloc(sizeof(node));
info->data=value;
info->next=head;
info->prev=NULL;
if(head!=NULL)
{
head->prev=info;
}
head=info;
}
void insertleft(int key,int alpha)
{
node *ref,*info;
ref=(node*)malloc(sizeof(node));
ref->data=alpha;
if(head->data==key)
{
ref->next=head;
ref->prev=NULL;
head->prev=ref;
head=ref;
return;
}
info=head;
	while(info->next->data!=key)
	{
	info=info->next;
	}
ref->next=info->next;
ref->prev=info;
info->next->prev=ref;
info->next=ref;
}
void delvalue(int key)
{
node *ref;
	if(head->data==key)
	{
	head=head->next;
	head->prev=NULL;
	printf("\nthe element deleted is %d:",key);
	return;
	}
ref=head;
	while(ref->next->data!=key)
	{
	ref=ref->next;
	}
	if(ref->next->next!=NULL)
	{
	ref->next->next->prev=ref;
	}
ref->next=ref->next->next;
printf("\ntheelement to be deleted is %d",key);
}
void display()
{
node *ref;
ref=head;
	if(ref==NULL)
	{
	printf("\nthe list is empty");
	return;
	}
printf("\nthe list is as follows\n");
	while(ref!=NULL)
	{
	printf("\t%d",ref->data);
	ref=ref->next;
	}
}
int search(int key)
{
node *ref;
int flag=0;
ref=head;
while(ref!=NULL)
{
	if(ref->data==key)
	{
	flag=1;
	break;
	}
	ref=ref->next;
}
return flag;
}
void dispback()
{
node *ref;
ref=head;
	if(ref==NULL)
	{
	printf("\n the list is empty");
	return;
	}
	while(ref->next!=NULL)
	{
	ref=ref->next;
	}
printf("\n the list in the reverse direction is as follows\n");
	while(ref!=NULL)
	{
	printf("\t%d",ref->data);
	ref=ref->prev;
	}
}


















